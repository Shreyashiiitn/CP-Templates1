// 匚尺卂乃_匚ㄖᗪ乇尺 (crab_coder)
// HARE KRISHNA
#include<bits/stdc++.h>
using namespace std::chrono;
using namespace std;
#define fastio ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL)
#define boolalpha std::cout << std::boolalpha;
#pragma GCC optimize("Ofast")
typedef long long ll;
typedef long double lld;
typedef signed long long int ull;
/*-------------------------------------------------------------*/
#define endl '\n'
#define mem(arr) memset(arr,0,sizeof(arr))
#define debug(x) cout << #x << " ---> " << x << endl;
#define pb push_back
#define F first
#define S second
#define sz(a) ((int)((a).size()))
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define repi(s,e,t) for(ull i=s;i<=e;i+=t)
#define repj(s,e,t) for(ull j=s;j<=e;j+=t)
#define vll vector <ll>
#define setll set <ll>
#define printi(v) for(auto i : v) cout<<i<<" "; cout<<endl;
#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
/*-------------------------------------------------------------*/
#define mod 1000000007
const int M = 998244353 ;
const int maxN = (int)3e5+10;
const int inf = 1e9+7 ;
const ll inf64= 1e17;
const ll ninf = inf*(-1)*1e5;
#ifdef Shreyash
#define dbg(x) cerr << #x <<" "; _print(x); cerr << endl;
#else
#define dbg(x);
#endif
/*------------------------------------------------------------------------------*/
void YES() { cout<<"YES"<<endl; }
void NO() { cout<<"NO"<<endl; }
/*-----------------------------------------------------------------------------*/
// Random int generator , (used while string hashing ) //
mt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count());
const ll B = uniform_int_distribution<ll>(0, M - 1)(rng);
/*-----------------------------------------------------------------------------*/
ll expo(ll a, ll b, ll M) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % M; a = (a * a) % M; b = b >> 1;} return res;}
int mod_add(int a, int b) { return (a % M + b % M) % M; }
int mod_sub(int a, int b) { return (a % M - b % M + M) % M; }
int mod_mul(int a, int b) { return (a % M * b % M) % M; }
int mod_expo(int a, int b) { if (b == 0) return 1; int res = mod_expo(a, b / 2); res = mod_mul(res, res); if (b % 2 == 1) res = mod_mul(res, a); return res; }
int mod_inv(int a) { return mod_expo(a, M - 2); }
int mod_v(int a, int b) { return mod_mul(a, mod_inv(b)); }
ll nCr(int n, int r){ ll p = 1, k = 1;if (n - r < r) {r = n - r;}
    if (r != 0) {while (r) {p *= n;k *= r; ll m = gcd(p, k);p /= m;k /= m;n--;r--;}}
    else {p = 1;} return p;}
/*----------------------------------------------------------------------------------------------------------------*/
// 1) To check perfect square no
bool isPerfectSquare(long long x)
{
    if (x >= 0) {
        ll a = llround(sqrtl(x)) ;
        return a*a==x ;
    }
    return false;
}
// 2) To check palindrome or not
bool is_palindrome(string s){
    ll n = s.size() ;
    ll l = 0 ; ll r = n-1 ;
    for(int i=0 ; i<n/2 ; i++){
        if(s[i] != s[n-i-1]){
            return false ;
        }
    }
    return true ;
}
/*----------------------------------------------------------------------------------------------------------------*/
// Custom Comparators
bool cmp(pair<ll, ll> x, pair<ll, ll> y) {
    // will sort first based on first value then second value
    return x.first > y.first or (x.first == y.first and x.second < y.second);
}
bool comp(string& a , string& b){
    return a+b > b+a ;
}
bool comparator(pair<ll,ll> x , pair<ll,ll> y){
    return x.second < y.second ;
}
/*----------------------------------------------------------------------------------------------------------*/
// String hashing function
ll get_hash(string &s){
    ll h = 0 ;
    for(char c : s) h = (h * 31 + (c - 'a' + 1)) % M ;
    return h ;
}
/*-----------------------------------------------------------------------------------------------------------*/

// Will gives prime factors of number n , that is factor's which are prime //
vector<ll> getprimefac(ll n)
{
    vector<ll> ans;
    ll nn = n;
    for (ll i = 2; i * i <= n; i++) {
        if (nn % i == 0) {
            ans.pb(i);
            while (nn % i == 0) { nn /= i; }
        }
    }
    if (nn > 1){ ans.pb(nn); }
    return ans;
}

// Will give all the factors of the number n
vector<ll> GetFactors_of_number(ll n ){
    vector<ll> ans ;
    for(int i=2 ; i*i <= n ; i++){
        while(n%i == 0){
            ans.pb(i) ;
            n = n/i ;
        }
    }
    if(n!=1){ ans.pb(n) ;}
    return ans ;
}

// Sieve (To get prime numbers till n) // O(Nlog logN) TC // 1 is neither prime nor composite
vector<ll> sieve(ll n)
{
    int *arr = new int[n + 1]();   // ll arr[n+1]{0} ;
    vector<ll> vec;
    for (ll i = 2; i <= n; i++)
        if (arr[i] == 0)
        {
            vec.push_back(i);
            for (ll j = i * i; j <= n; j += i)
                arr[j] = 1;
        }
    return vec;
}
// Getting square root using advanced BS :- with precision as 10^-6
float  sq_root(float n){
    float low = 1 ; float high = n ; float ans ;
    while(high - low >= 1e-6){      // syntax is nothing but (high - low >= error)
        float mid = (low + high)/2 ;
        if(mid*mid <= n ){
            ans = mid ; low = mid + 1e-6 ;
        }
        else {
            high = mid - 1e-6 ;
        }
    }
    return ans ;
}
// Sometimes the above BS would not work in case of more precision , like 1e-9
float ADV_BS_sqrt(float n ){
    float low = 1; float high = n; float ans;
    for(int i=0 ; i<=40 ; i++) {    // if precision is 10-9 use 60
        float mid = (low + high)/2 ;
        if(mid*mid <= n ){
            ans = mid ; low = mid + 1e-6 ;
        }
        else {
            high = mid - 1e-6 ;
        }
    }
    return ans ;
}
// Template to calculate NcR (ncr) ;
// time complexity is to precompute its O(N+ N+ log N) == O(N) ;
// and to get ncr for queries in the main function its O(1) ;
const int N = 1e6 + 5  ;
ll fact[N] , invfact[N] ;
void precompute(){
    fact[0] = fact[1] = 1 ;
    for(int i=2 ; i<=N ; i++){
        fact[i] = fact[i-1]*i ;
        fact[i] %= M ;
    }
    invfact[N-1] = mod_inv(fact[N-1]) ;
    for(int i = N-2 ; i>=0 ; i--){
        invfact[i] = invfact[i+1]*(i+1) ;
        invfact[i] %= M ;
    }
}
ll ncr(ll n , ll r){
    if(r > n){ return 0; }
    ll num = fact[n] ;
    num *= invfact[r] ;
    num %= M ;
    num *= invfact[n-r] ;
    num %= M ;
    return num ;
}

//------------------------------------------------------------------------------------------//
// common mistakes that I do while using sets ;
// set me bhi vector ki tarah stl mat use karo ,
// specially lower_bound and upper_bound ;
// and *max_element bhi
// this all things will become linear while will lead to tle
// also use s.end() to get max element  ;
//------------------------------------------------------------------------------------------//


void solve(){





}
int32_t main() {
    fastio;
    cout << fixed << setprecision(10);
#ifdef shreyash
    freopen("input.txt", "r", stdin);
            freopen("output.txt", "w", stdout);
            freopen("error.txt", "w", stderr);
#endif
    auto start = high_resolution_clock::now();
    int t  ;
    cin >> t ;
    int i = 1 ;
    while (i <= t) {
        //cout<<"Case #"<<i<<": ";
        solve();
        i++;
    }
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
#ifdef shreyash
    cout<<endl<<"Time: "<< (float)duration.count()/1000000<<" s"<<endl;
#endif
}
